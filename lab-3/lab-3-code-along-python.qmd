---
title: "Topic Modelling with Python"
subtitle: "Lab 3: Code-Along"
format:
  revealjs: 
    slide-number: c/t
    progress: true
    chalkboard: 
      buttons: false
    preview-links: auto
    theme: [default, css/laser.scss]
    logo: img/LASERLogoB.png
    width: 1920
    height: 1080
    margin: 0.05
    footer: <a href=https://www.go.ncsu.edu/laser-institute>go.ncsu.edu/laser-institute
highlight-style: a11y
editor: visual
jupyter: python3
---

## Agenda

1.  Topic Modelling and LDA Model

2.  Python gensim Library for LDA

3.  Perform Topic Modelling with gensim Library

    -   Import and Preprocess Data (Lab 1.2; Lab 1.3)

    -   Preprocess Data for LDA ModellingÂ 

    -   Fit a LDA Model

    -   Find optimal \# of topics - K

    -   Topic Summaries and Visualization

        -   pyLDAvis

# Topic Modelling and LDA Model

## What is topic modelling?

**Topic Modeling** is a type of statistical model used to uncover the abstract "topics" that occur in a collection of documents. The primary goal of topic modeling is to discover the hidden thematic structure in large archives of text data. This helps in organizing, understanding, and summarizing large datasets of textual information.

## What is LDA?

Latent Dirichlet Allocation (LDA) is one of the most popular algorithms for topic modeling. Such topic modeling algorithms assume that any document is a mixture of topics and that any topic is a mixture of words. By analyzing the patterns of word co-occurrence across the documents, topic models can identify groups of words that frequently appear together and assign them to topics.

# Python LDA Library - Gensim

## Gensim

Gensim is designed for natural language processing (NLP) tasks such as topic modeling, document indexing, and similarity retrieval, particularly with large text corpora. Gensim provides efficient implementations of popular topic modeling algorithms such as Latent Dirichlet Allocation (LDA) and Latent Semantic Analysis (LSA).

# Perform LDA Modelling with Gensim Library

## LDA Topic Modelling with gensim

```{python}
#| echo: true

!pip install nltk gensim matplotlib pyLDAvis
import pandas as pd
import nltk
import gensim
import matplotlib.pyplot as plt
import pyLDAvis
```

## LDA Topic Modelling with gensim

```{python}
#| echo: true

from gensim import corpora, models
from gensim.models.ldamodel import LdaModel

# Example corpus
corpus = [
    ["coke", "pepsi", "comparasion", "hypothesis", "differences"], 
    ["sample", "population", "variable", "statistic"], 
    ["data", "water", "juice", "soda"]
]

# Create a dictionary representation of the documents
dictionary = corpora.Dictionary(corpus)

# Convert the documents to a bag-of-words corpus 
corpus_bow = [dictionary.doc2bow(doc) for doc in corpus]

# Train the LDA model
lda_model = models.LdaModel(corpus_bow, num_topics=2, id2word=dictionary, passes=10)

# Print the topics found
for topic_id, topic in lda_model.print_topics():
    print(f"Topic {topic_id}: {topic}")
```

## Find optimal \# of topics - K

### CoherenceModel Approach

Coherence in topic modeling refers to the interpretability and semantic consistency of the topics generated by the model. The higher, the better. Higher coherence scores indicate that the words within a topic are more semantically similar and coherent, which means the topic is more meaningful and distinct.

## 

### How to implement CoherenceModel approach?

```{python}
#| echo: true
#| output-location: column

# Import needed libraries
from gensim.models import CoherenceModel
import matplotlib.pyplot as plt
from gensim import corpora, models
from gensim.models.ldamodel import LdaModel

# Example corpus
corpus = [
    ["coke", "pepsi", "comparasion", "hypothesis", "differences"], 
    ["sample", "population", "variable", "statistic"], 
    ["data", "water", "juice", "soda"]
]

# Create a dictionary representation of the documents
dictionary = corpora.Dictionary(corpus)

# Convert the documents to a bag-of-words corpus 
corpus_bow = [dictionary.doc2bow(doc) for doc in corpus]

# Define a function to compute coherence values
def compute_coherence_values(dictionary, corpus, texts, limit, start=2, step=1):
    coherence_values = []
    model_list = []
    
    for num_topics in range(start, limit, step):
        model = LdaModel(corpus=corpus, id2word=dictionary, num_topics=num_topics)
        model_list.append(model)
        coherencemodel = CoherenceModel(model=model, texts=texts, dictionary=dictionary, coherence='c_v', processes=1)
        coherence_values.append(coherencemodel.get_coherence())
        
    return model_list, coherence_values

# Set parameters
limit = 5  # Maximum number of topics
start = 2  # Minimum number of topics
step = 1   # Step size for the number of topics

# Compute coherence values
model_list, coherence_values = compute_coherence_values(dictionary=dictionary, corpus=corpus_bow, texts=corpus, start=start, limit=limit, step=step)

# Plot the result
x = range(start, limit, step)
plt.plot(x, coherence_values)
plt.xlabel("Number of Topics")
plt.ylabel("Coherence Score")
plt.title("Optimal Number of Topics")
plt.xticks(x)
plt.grid()
plt.show()
```

## Your Turn

Fit a LDA model with the optimal \# of topics

```{python}
#| echo: true
# YOUR CODE IS HERE

```

# Topic Summaries and Visualization

## pyLDAvis

### What is pyLDAvis?

The pyLDAvis is primarily designed for visualizing the results of LDA topic modeling, it provides an interactive dashboard that helps users interpret the topics discovered by LDA.

## How to create a visualization with pyLDAvis?

```{python}
#| echo: true
#| output-location: column

# Import needed libaries
import pyLDAvis
import pyLDAvis.gensim

# Prepare the visualization
vis = pyLDAvis.gensim.prepare(lda_model, corpus_bow, dictionary)

# Display the visualization
pyLDAvis.display(vis)
```

## Your Turn

Create a pyLDAvis with the optimal model that you got.

```{python}
#| echo: true
# YOUR CODE IS HERE

```

\
\
